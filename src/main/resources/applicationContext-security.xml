<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
  xmlns:beans="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans 
  http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
  http://www.springframework.org/schema/security 
  http://www.springframework.org/schema/security/spring-security-3.0.xsd">

  <!-- HTTP-Securityの設定
  auto-configをtrueにすることでデフォルト設定が有効になり、記述量を削減できる -->
  <http auto-config="true">
    <!-- URL毎に必要な権限を記述する
    ここではすべてのURLにアクセスするには、主体がロールROLE_ADMINを保持していることが必要という意味になる -->
    <intercept-url pattern="/**" access="ROLE_ADMIN" />
  </http>

  <!-- ユーザ認証の設定
  authentication-managerはユーザ認証処理を１つ以上のauthentication-providerに委譲する -->
  <authentication-manager>
    <!-- Bean定義ファイルやRDBMSから主体情報を取得し、ユーザ認証を行うauthentication-provider -->
    <authentication-provider>
      <!-- Bean定義ファイルから主体情報を取得するuser-service -->
      <user-service>
        <!-- 個別の主体情報を設定
        password-encoderタグでshaやmd5、独自ハッシュ関数を指定して、password属性にハッシュ値を利用することも可能 -->
        <user name="user" password="useruser" authorities="ROLE_USER" />
        <user name="admin" password="adminadmin" authorities="ROLE_ADMIN" />
      </user-service>
      <!-- RDBMSから主体情報を取得するjdbc-user-serviceを利用することも可能 -->
    </authentication-provider>
    <!-- LDAPから主体情報を取得して、ユーザ認証を行うldap-authentication-providerや
    独自のauthentication-providerを利用することも可能 -->
  </authentication-manager>

</beans:beans>
